trigger:
  branches:
      include:
      - master
      - release
      - refs/tags/*
pr:
- master

pool:
  vmImage: 'windows-2019'

variables:
  BuildConfiguration: Release
  Projects: '**/*.csproj'

steps:
# Install required SDKs and tools
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    packageType: 'sdk'
    version: '5.0.102'

# Patch preview project versions (only when on master branch)
- task: CmdLine@2
  displayName: 'Install DNT'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/release'))
  inputs:
    script: 'npm i -g dotnettools'
- task: CmdLine@2
  displayName: 'Update project version patch'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/release'))
  inputs:
    script: 'dnt bump-versions patch'
    failOnStderr: true
- task: CmdLine@2
  displayName: 'Patch project version preview'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/release'))
  inputs:
    script: 'dnt bump-versions preview "$(Build.BuildNumber)"'
    failOnStderr: true

# Build and test
- task: DotNetCoreCLI@2
  displayName: dotnet restore
  inputs:
    command: restore
    projects: '$(Projects)'
    includeNuGetOrg: true
- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '$(Projects)'
    arguments: '--configuration $(BuildConfiguration)'
    feedsToUse: 'select'
    versioningScheme: 'off'
- task: DotNetCoreCLI@2
  displayName: 'Run tests'
  inputs:
    command: 'test'
    projects: '$(Projects)'
    arguments: '--configuration $(BuildConfiguration)'
    feedsToUse: 'select'
    versioningScheme: 'off'

# Publish artifacts
- task: CopyFiles@2
  displayName: 'Copy packages'
#  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    Contents: '**/*.nupkg'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true
- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'
#  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

# Upload to Apiverse.io
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    packageType: 'sdk'
    version: '3.1.102'

- task: PowerShell@2
  displayName: 'Upload to Apiverse.io'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    targetType: 'inline'
    script: |
      dotnet tool install -g apimundo.cli
      apimundo add-repository-changeset /organization:"github" /project:"ricosuter" `
          /repository:"NJsonSchema" /branch:"master" `
          /commit:"$(Build.SourceVersion)" /api-key:"$(ApimundoApiKey)"